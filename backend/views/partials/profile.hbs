<div class="max-w-4xl mx-auto px-4 py-8">
    <!-- Profile Header -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-8 mb-8">
        <div class="flex flex-col md:flex-row items-center md:items-start space-y-6 md:space-y-0 md:space-x-8">
            <!-- Profile Picture -->
            <div class="relative">
                <img src="{{user.profile_pic}}" alt="Profile Picture" class="w-32 h-32 rounded-full object-cover border-4 border-white shadow-lg">
                <div class="absolute -bottom-2 -right-2 w-8 h-8 bg-green-400 border-4 border-white rounded-full"></div>
            </div>
            
            <!-- Profile Info -->
            <div class="flex-1 text-center md:text-left">
                <h1 class="text-3xl font-bold text-gray-800 mb-2">{{user.username}}</h1>
                <p class="text-gray-600 mb-4">{{user.email}}</p>
                
                <!-- Friend Key Section -->
                <div class="bg-gray-50 rounded-lg p-4 mb-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm text-gray-500 mb-1">Your Friend Key</p>
                            <p class="font-mono text-lg font-semibold text-gray-800" id="fkey">{{user.f_key}}</p>
                        </div>
                        <button onclick="toggleFkey()" class="text-indigo-600 hover:text-indigo-700 font-medium text-sm transition duration-150 ease-in-out">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                            </svg>
                        </button>
                    </div>
                </div>
                
                <!-- Stats -->
                <div class="flex items-center space-x-6 mb-6">
                    <div class="text-center">
                        <p class="text-2xl font-bold text-gray-800">{{user.media.length}}</p>
                        <p class="text-sm text-gray-500">Posts</p>
                    </div>
                    <div class="text-center">
                        <p class="text-2xl font-bold text-gray-800">{{user.friends.length}}</p>
                        <p class="text-sm text-gray-500">Friends</p>
                    </div>
                </div>
                
                <!-- Action Buttons -->
                <div class="flex flex-col sm:flex-row gap-3">
                    <button class="edit-friends-list inline-flex items-center justify-center px-6 py-3 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 transition duration-150 ease-in-out">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                        </svg>
                        Manage Friends
                    </button>
                    <button class="change-f-key inline-flex items-center justify-center px-6 py-3 bg-gray-100 text-gray-700 font-medium rounded-lg hover:bg-gray-200 transition duration-150 ease-in-out">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                        Change F-Key
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- My Media Section -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-8">
        <div class="flex items-center justify-between mb-6">
            <h2 class="text-2xl font-bold text-gray-800">My Media</h2>
            <a href="/create" class="inline-flex items-center px-4 py-2 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 transition duration-150 ease-in-out">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
                Upload New
            </a>
        </div>
        
        {{#if media.length}}
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {{#each media as |m|}}
                    <div class="group relative bg-gray-50 rounded-lg overflow-hidden hover:shadow-lg transition duration-150 ease-in-out">
                        <img class="media-image w-full h-48 object-cover" id="{{m._id}}" src="{{m.url}}" alt="Media item">
                        
                        <!-- Overlay on hover -->
                        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-50 transition duration-150 ease-in-out flex items-center justify-center">
                            <button class="edit-share opacity-0 group-hover:opacity-100 bg-white text-gray-800 px-4 py-2 rounded-lg font-medium hover:bg-gray-100 transition duration-150 ease-in-out" data-media-id="{{m._id}}">
                                <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
                                </svg>
                                Manage Access
                            </button>
                        </div>
                        
                        <!-- Media type badge -->
                        <div class="absolute top-2 right-2">
                            <span class="bg-black bg-opacity-50 text-white px-2 py-1 rounded-full text-xs font-medium">
                                {{m.type}}
                            </span>
                        </div>
                    </div>
                {{/each}}
            </div>
        {{else}}
            <!-- Empty State -->
            <div class="text-center py-12">
                <div class="w-24 h-24 mx-auto mb-6 bg-gray-100 rounded-full flex items-center justify-center">
                    <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                </div>
                <h3 class="text-xl font-semibold text-gray-800 mb-2">No media yet</h3>
                <p class="text-gray-500 mb-6">Start sharing your memories with friends!</p>
                <a href="/create" class="inline-flex items-center px-6 py-3 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 transition duration-150 ease-in-out">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Upload Your First Photo
                </a>
            </div>
        {{/if}}
    </div>
</div>

<!-- Sharing Modal -->
<div id="sharingModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <!-- Modal Header -->
        <div class="flex items-center justify-between p-6 border-b border-gray-200">
            <h3 class="text-xl font-semibold text-gray-800">Manage Access</h3>
            <button id="closeModal" class="text-gray-400 hover:text-gray-600 transition duration-150 ease-in-out">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        
        <!-- Modal Body -->
        <div class="p-6">
            <div class="mb-6">
                <img id="modalImage" src="" alt="Media preview" class="w-full h-48 object-cover rounded-lg mb-4">
                <p class="text-sm text-gray-600">Choose which friends can see this image</p>
            </div>
            
            <!-- Friends List -->
            <div class="space-y-3 mb-6">
                <h4 class="font-medium text-gray-800 mb-3">Your Friends</h4>
                <div id="friendsList" class="space-y-2">
                    <!-- Friends will be populated here -->
                </div>
            </div>
            
            <!-- Action Buttons -->
            <div class="flex space-x-3">
                <button id="saveAccess" class="flex-1 bg-indigo-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-indigo-700 transition duration-150 ease-in-out">
                    Save Changes
                </button>
                <button id="cancelModal" class="flex-1 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg font-medium hover:bg-gray-200 transition duration-150 ease-in-out">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>

<script src="/js/main.js"></script>
<script type="module" src="/js/manage-media.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('sharingModal');
    const closeModal = document.getElementById('closeModal');
    const cancelModal = document.getElementById('cancelModal');
    const saveAccess = document.getElementById('saveAccess');
    const modalImage = document.getElementById('modalImage');
    const friendsList = document.getElementById('friendsList');
    
    let currentMediaId = null;
    let currentFriends = [];
    let currentAccessList = [];
    
    // Close modal functions
    function hideModal() {
        modal.classList.add('hidden');
        document.body.style.overflow = 'auto';
    }
    
    closeModal.addEventListener('click', hideModal);
    cancelModal.addEventListener('click', hideModal);
    
    // Close modal when clicking outside
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            hideModal();
        }
    });
    
    // Handle edit-share button clicks
    document.addEventListener('click', function(e) {
        if (e.target.closest('.edit-share')) {
            const button = e.target.closest('.edit-share');
            const mediaId = button.getAttribute('data-media-id');
            const mediaImage = button.closest('.group').querySelector('.media-image');
            
            currentMediaId = mediaId;
            modalImage.src = mediaImage.src;
            
            // Show modal
            modal.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
            
            // Load friends and access data
            loadFriendsAndAccess(mediaId);
        }
    });
    
    // Load friends and current access list
    async function loadFriendsAndAccess(mediaId) {
        try {
            // Get friends list
            const friendsResponse = await fetch('/api/editFriendsList', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ userFID: '{{user.f_key}}' })
            });
            
            const friendsData = await friendsResponse.json();
            currentFriends = Object.entries(friendsData.friends).map(([id, name]) => ({ id, name }));
            
            // Get current access list for this media
            const accessResponse = await fetch('/api/getNames', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id: mediaId })
            });
            
            const accessData = await accessResponse.json();
            currentAccessList = accessData.friends || [];
            
            // Render friends list
            renderFriendsList();
            
        } catch (error) {
            console.error('Error loading friends and access:', error);
        }
    }
    
    // Render friends list with toggle switches
    function renderFriendsList() {
        friendsList.innerHTML = '';
        
        currentFriends.forEach(friend => {
            const isSelected = currentAccessList.includes(friend.name);
            
            const friendItem = document.createElement('div');
            friendItem.className = 'flex items-center justify-between p-3 bg-gray-50 rounded-lg';
            
            // Create friend info section
            const friendInfo = document.createElement('div');
            friendInfo.className = 'flex items-center space-x-3';
            friendInfo.innerHTML = `
                <div class="w-8 h-8 bg-indigo-100 rounded-full flex items-center justify-center">
                    <svg class="w-4 h-4 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                </div>
                <span class="font-medium text-gray-800">${friend.name}</span>
            `;
            
            // Create toggle switch
            const toggleContainer = document.createElement('div');
            toggleContainer.className = 'flex items-center';
            
            const toggleSwitch = document.createElement('button');
            toggleSwitch.className = `relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 ${isSelected ? 'bg-indigo-600' : 'bg-gray-200'}`;
            toggleSwitch.setAttribute('data-friend-name', friend.name);
            toggleSwitch.setAttribute('data-selected', isSelected);
            
            const toggleCircle = document.createElement('span');
            toggleCircle.className = `inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${isSelected ? 'translate-x-6' : 'translate-x-1'}`;
            
            toggleSwitch.appendChild(toggleCircle);
            toggleContainer.appendChild(toggleSwitch);
            
            // Add click event to toggle
            toggleSwitch.addEventListener('click', function() {
                const currentState = this.getAttribute('data-selected') === 'true';
                const newState = !currentState;
                
                this.setAttribute('data-selected', newState);
                
                if (newState) {
                    this.classList.remove('bg-gray-200');
                    this.classList.add('bg-indigo-600');
                    toggleCircle.classList.remove('translate-x-1');
                    toggleCircle.classList.add('translate-x-6');
                } else {
                    this.classList.remove('bg-indigo-600');
                    this.classList.add('bg-gray-200');
                    toggleCircle.classList.remove('translate-x-6');
                    toggleCircle.classList.add('translate-x-1');
                }
                
                console.log(`Friend ${friend.name} access ${newState ? 'granted' : 'revoked'}`);
            });
            
            friendItem.appendChild(friendInfo);
            friendItem.appendChild(toggleContainer);
            friendsList.appendChild(friendItem);
        });
    }
    
    // Save access changes
    saveAccess.addEventListener('click', async function() {
        const toggleButtons = friendsList.querySelectorAll('button[data-friend-name]');
        const selectedFriends = [];
        const unselectedFriends = [];
        
        toggleButtons.forEach(button => {
            const friendName = button.getAttribute('data-friend-name');
            const isSelected = button.getAttribute('data-selected') === 'true';
            
            if (isSelected) {
                selectedFriends.push(friendName);
            } else {
                unselectedFriends.push(friendName);
            }
        });
        
        console.log('Selected friends:', selectedFriends);
        console.log('Unselected friends:', unselectedFriends);
        
        try {
            const response = await fetch('/api/shareImage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    imageId: currentMediaId,
                    friends: selectedFriends,
                    unselectedFriends: unselectedFriends
                })
            });
            
            if (response.ok) {
                // Show success message
                const successMsg = document.createElement('div');
                successMsg.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
                successMsg.textContent = 'Access updated successfully!';
                document.body.appendChild(successMsg);
                
                setTimeout(() => {
                    successMsg.remove();
                }, 3000);
                
                hideModal();
            } else {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to update access');
            }
            
        } catch (error) {
            console.error('Error updating access:', error);
            alert('Failed to update access: ' + error.message);
        }
    });
});
</script>


